name: workflow_dispatch deploy the 'main' branch or a tag scheduler

on:
  workflow_dispatch:
    inputs:
      project:
        description: "Release the project manually."
        required: true
        default: "web-ui"
        type: string
      env:
        description: "Choose the environment for deployment."
        required: true
        default: "mainnet"
        type: string
      ref:
        description: "Specify the branch or a tag to deploy"
        required: true
        default: "v0.0.11"
        type: string
jobs:
  pre-check:
    runs-on: ubuntu-latest
    if: ((github.event.inputs.project == 'web-ui') && ((github.event.inputs.env == 'testnet') || (github.event.inputs.env == 'mainnet')))
    outputs:
      codeowners: ${{ steps.codeowners.outputs.content }}
      is_valid_ref: ${{ steps.check_ref.outputs.result }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Read codeowners
      id: codeowners
      uses: juliangruber/read-file-action@v1
      with:
        path: .github/CODEOWNERS

    - name: Verify if ref is the main branch or a valid tag on main
      id: check_ref
      run: |
        REF="${{ github.event.inputs.ref }}"
        MAIN_BRANCH="main"
        RESULT="invalid" # Default to invalid
        ERROR_MESSAGE=""

        # Ensure all tags are fetched
        git fetch --tags

        # Check if REF is exactly the main branch
        if [ "$REF" == "$MAIN_BRANCH" ]; then
          RESULT="valid"
        else
          # Check if REF is a tag and if it exists
          if git show-ref --tags "$REF" >/dev/null 2>&1; then
            # Verify if the tag is on the main branch
            TAG_SHA=$(git rev-parse "$REF^{tag}")
            MAIN_SHA=$(git merge-base "$TAG_SHA" "$MAIN_BRANCH")
            if [ "$TAG_SHA" == "$MAIN_SHA" ]; then
              RESULT="valid"
            else
              ERROR_MESSAGE="Tag $REF is not on the $MAIN_BRANCH branch."
            fi
          else
            ERROR_MESSAGE="Ref $REF is neither $MAIN_BRANCH nor a valid tag."
          fi
        fi

        if [ "$RESULT" != "valid" ]; then
          echo "$ERROR_MESSAGE"
          exit 1
        fi

        echo "RESULT=$RESULT"
        echo "::set-output name=result::$RESULT"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
